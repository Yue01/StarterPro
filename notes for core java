6.3
//p.145
manager不能直接访问employee的私有域，需要通过接口。
这一点可以保证数据的安全性同时能够访问数据。
如果manager与employee共有有个方法名
加入super.getsalary（）；

//p.146
super(int n, string a, double b....);
这里是调用父类employee中含有 n a b 参数的构造器的意思

//p.147
子类和父类的范围覆盖。
父类可以引用为子类，因为父类的范围小于子类
ex:
employee e;
e= new Employee();
e= new manager();    //both ok

manager boss= new manager();
employee[] staff=new new employee[3];
staff[0]=boss;       //still ok

boss.setbonus(5000);
staff[0].setbonus(5000);   //error:staff[0]'s still regarded as employee;

manager s = staff[1];     //error:not every employee is a manager;

6月4日
//p.152
重写时子类方法不能低于父类的可见性
//p.154
强制转型时，不能向下转型。
在强制转型的过程中，使用instanceof来进行检验
if(staff[1] instanceof manager){
    boss=(Manager)staff[1];
}
//170
关于static：
如果将静态域定义为static ，那么每个类中只有一个这样的域，而每一个对象对于所有的实例域都有自己的一份拷贝本。
class Student{  
    private static int nextId = 1;  
    private String studentId;  
    ......  
}  
果有100个Student类对象 ，那么有100个实例域studentId,每一个student都有自己的一份，但是只有一个静态域nextId , 100个学生对象共享这一个静态域nextId, 使没有学生对象，静态域也是存在的，它是属于类的，而不是属于任何独立的对象。
静态域（静态方法）可以直接用类名来调用，而不用创建对象用对象来调用;
即：实例方法属于对象，静态方法是属于类的；
ex：
class test(
public static int add(){}//1
public void remove(){}//2
}
调用时：test.add();
        new test().remove();


equals没看懂

//p.185 泛型链表
ArrayList<Employee>staff = new ArrayList<Employee>();  //括号
staff.add(new Employee("hahah"));  
/*
*如果已满，创建个新的列表，容量+1，拷进去
*/
如果容量已知，最好给一个大概的范围：
staff.ensureCapacity(100);
或者直接把容量传进去
ArrayLuist<Employee> staff = new ArrayList<Employee>(100);

staff.size() 会得到数组容量

ArrayList<T>(int initialCapacity) 
//用指定容量构造一个空数组列表
//空数组列表中添加元素是不能用set的，set只能置换，如果想添加只能add
boolean add(T obj) 尾端添加元素，返回true
staff.add(n,e)
int size()
void trimToSize() //将数组列表的容量削减到当前尺寸

staff.set(i,harry)；
a[i]=harry;

Employ e= staff.remove(n); //删除一个元素，被删除的元素由返回值返回

链表使用toarray方法时有一个例子：
import java.util.LinkedList;  
import java.util.List;  
public class umm {  
  public static void main(String[] args) {  
    List<String> theList = new LinkedList<String>();  
    theList.add("A");  
    theList.add("B");  
    theList.add("C");  
    theList.add("D");  
    String[] my = theList.toArray(new String[theList.size()]);  
    for (int i = 0; i < my.length; i++) {  
      System.out.println(my[i]);  
    }  
  }  
} 
//toArray方法的源码中指定，如果分配的数组容量不够，会自动生成一个
//够得，再返回。
//所以这里和toArray(new String[0]) 是没区别的



//p 190  打包与拆包
static string tostring(int i, int radix)//返回数值i基于给定radix参数进制的表示
static int parseInt(String s,int radix)
Number parse(String s)

//参数数量可变
public static double max(double...values)   //这里的...是代码的一部分
{
   double largest = Double.MIN_VALUE;
   for(double v:values)if(v>values)largest= v;
   return largest;
}
//6月6日
300节那个代码讲的有点啰嗦。。建议直接看core java，然后直接百度相关概念，再去看。清晰很多。



